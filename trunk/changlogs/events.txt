diff -uN xultu/events.html /main/xultu/output/xultu/events.html
--- xultu/events.html   2005-03-18 18:08:16.686266610 -0500
+++ /main/xultu/output/xultu/events.html    2005-03-18 18:12:06.128563436 -0500
@@ -66,264 +60,245 @@


-
-<P>
-The <SPAN CLASS="attrib">oncommand</SPAN> is the handler you will usually use
-to respond to buttons and menus. You can put code here which is executed when
-the user clicks on the element, or activates it with the keyboard.
+You can include multiple scripts in a XUL file by using multiple
+<A CLASS="tag" HREF="/references/elemref/ref_script.html">script</A> tags, each pointing to a different script. You
+may use relative or absolute URLs. For example, you may use URLs of the following form:
 </P>

-<DIV CLASS="task">
+
+<DIV CLASS="sample"><PRE>&lt;script src="findfile.js"/&gt;
+&lt;script src="chrome://findfiles/content/help.js"/&gt;
+&lt;script src="http://www.example.com/js/items.js"/&gt;</PRE></DIV>
+
+

 <P>
-An <SPAN CLASS="attrib">oncommand</SPAN> handler can be placed on the Find and
-Cancel buttons in the find files dialog. Clicking the Find button should start
-the search. Because we aren't going to implement this part, we'll leave it out.
-However, clicking the Cancel button should close the window. The code below
-shows how to do this. While we're at it, let's add the same code to the Close
-menu item.
+This tutorial does not attempt to describe how to use JavaScript as this is a
+fairly large topic and there are plenty of other resources that available for this.
 </P>

+<H3>Responding to Events</H3>

-<DIV CLASS="sample"><PRE>&lt;menuitem label="Close" accesskey="c" <SPAN STYLE="color: red;">oncommand="window.close();"</SPAN>/&gt;
-...
-
-&lt;button id="cancel-button" label="Cancel"
-     <SPAN STYLE="color: red;">oncommand="window.close();"</SPAN>/&gt;</PRE></DIV>
+<P>
+The script will contain code which responds to various events triggered by the user
+or other situations. There are about thirty or so different events that may be
+handled in several different ways. A typical event is the user pressing a mouse
+button or pressing a key. Each XUL element has the ability to trigger certain events
+in different situations. Some events are triggered only be certain elements.
+</P>

+<P>
+Each event has a name, for example, 'mousemove' is the name of the event that is
+triggered when the user moves the mouse over a UI element. XUL uses the same event
+mechanism as defined by
+<A HREF="http://www.w3.org/TR/DOM-Level-2-Events/">DOM Events</A>.
+When an action occurs that would trigger an event, such as the user moving the mouse,
+an event object is created corresponding to that event type. Various properties are set
+on the event object such as the mouse position, the key that was pressed, and so forth.
+</P>

+<P>
+The event is then sent to the XUL in phases. The first phase is the capturing
+phase, in which the event is first sent to the window, then to the document,
+followed by each ancestor of the XUL element where the event occured downwards
+until it reaches that element. Then, the event is sent to that XUL element.
+Finally, during the bubbling phase, the event is sent to each element back upwards
+until it reaches the window again. You can respond to an event during either the
+capturing or bubbling phase. Once the event has finished propagating, any default
+action will occur, which is the built in behaviour of the element.
+</P>

 <P>
-Two handlers have been added here. The <SPAN CLASS="attrib">oncommand</SPAN>
-handler was added to the Close menu item. By using this handler, the user will
-be able to close the window by clicking the menu item or by selecting it with
-the keyboard. The <SPAN CLASS="attrib">oncommand</SPAN> handler was added to the
-Cancel button.
+For example, when the mouse is moved over a button that inside a box, a 'mousemove'
+event is generated, and sent first to the window, followed by the document, and then
+the box. That completes the capturing phase. Next, the 'mousemove' event is sent to
+the button. Finally, the bubbling phase causes the event to be sent to the box,
+document and window. The bubbling phase is essentially the reverse of the capturing
+phase. Note that some events don't do the bubbling phase.
 </P>

-</DIV>
+<P>
+You can attach listeners to each element to listen to the events during each step
+of event propagation. Due to the way a single event is passed to all the ancestors,
+you may attach a listener to a specific element or to an element higher in the
+hierarchy. Naturally, an event attached to an element higher up will receive
+notification of all elements inside it, whereas an event attached to a button will
+only receive events pertaining to that button. This is useful if there are several
+elements you would like to handle using the same or similar code.
+</P>

 <P>
-Similarly, we can respond to other mouse events and keyboard presses using the
-mouse and key event handlers. If you do not specify an event handler for a
-particular event, the element will handle it itself. This is usually what you want
-to have happen. Most XUL elements will have their own responses to mouse and
-keyboard events. For example, menuitems will respond to their access keys and
-popups will appear at the right time.
+Once you handle an event, regardless of where in the propagation the event is, you
+will likely want to stop the event from being sent to further elements, essentially
+stopping the capturing or bubbling phases from continuing. Depending on how you
+attach the event listener to an element, there are different ways of doing this.
 </P>

-<H3>Event Model</H3>
+<P>
+The most common event used is the 'command' event. The command event is fired when a
+user activates an element, for example by pressing a button, changing a checkbox or
+selecting an item from a menu. The command event is a useful event since it
+automatically handles different ways of activating the element. For example, the
+command event will occur regardless of whether the user uses the mouse to click a
+button, or presses the Enter key.
+</P>

 <P>
-XUL uses the same event model that is described in
-<A HREF="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/">DOM2 Events</A>.
-Briefly, an event is sent in two phases. In the capturing phase, an event such as a
-mouse click is first sent to the document and then it works its way down the hierarchy
-of element until its reaches the element that triggered the event. The bubbling phase
-occurs next which is the reverse. The event is sent back up the hierarchy to each
-element in turn.
+There are two ways to attach an event listener to an element. First, by using
+an attribute with script as its value. Second, by calling an element's addEventListener
+method. The former may only handle bubbling events but tends to be simpler to
+write. The latter can handle events at any phase and may also be used attach multiple
+listeners for an event to an element. Using the attribute form is more common for most
+events.
 </P>

 <P>
-Along the way, if the event is handled by an element, processing of the event stops.
-If that element does not handle the event, it continues to the next element until
-one does. If nothing handles the event, default processing is performed.
+To use the attribute form, place an attribute on the element where you want the event
+listener to be, the name of which should be the event name preceded by the word 'on'.
+For example, the corresponding attribute for the 'command' event is 'oncommand'. The
+value of the attribute should be some script that should be executed when the event
+occurs. Typically, this code will be short and just call a function defined in a
+separate script. An example of responding to a button being pressed:
 </P>

+
+Example 6.1.1:
+<A HREF='examples/ex_events_1.xul.txt'>Source</A>
+<A HREF="examples/ex_events_1.xul" ONCLICK="window.open('examples/ex_events_1.xul','xulex','chrome,resizable'); return false;">View</A>
+<DIV CLASS="example"><PRE>&lt;button label="OK" oncommand="alert('Button was pressed!');"/&gt;</PRE></DIV>
+
+
+
 <P>
-This means that you do not have to put the event handler on the element that you
-want to respond to the event. You can also put it on any parent element above the
-element. For example, instead of putting the event handler on the
-<A CLASS="tag" HREF="/references/elemref/ref_menuitem.html">menuitem</A>, you could put the handler on the
-<SPAN CLASS="tag">menu element.</SPAN>
+Since the command event will bubble, it is also possible to place the event listener
+on an enclosing element. In the example below, the listener has been placed on a box
+and will receive events for both elements.
 </P>

+
+Example 6.1.2:
+<A HREF='examples/ex_events_2.xul.txt'>Source</A>
+<A HREF="examples/ex_events_2.xul" ONCLICK="window.open('examples/ex_events_2.xul','xulex','chrome,resizable'); return false;">View</A>
+<DIV CLASS="example"><PRE>&lt;vbox oncommand="alert(event.target.tagName);"&gt;
+  &lt;button label="OK"/&gt;
+  &lt;checkbox label="Show images"/>
+&lt;/vbox&gt;</PRE></DIV>
+
+
+
+<P>
+In this example, the command event will bubble up from the button or checkbox to
+the vbox, where it is handled. If a second listener (the
+<SPAN CLASS="attrib">oncommand</SPAN> attribute) were placed on the button, its
+code will be called first, followed by the handler on the vbox. Event handlers are
+passed the event object as an implied argument called 'event'. This is used to get
+specific information about the event. One commonly used property is the 'target'
+property of the event, which holds the element where the event actually occured.
+In the example we display an alert containing the target's tag name. The target is
+useful when using a bubbling event so that you could have a set of buttons which
+are all handled by a single script.
+</P>
+
+<P>
+You might notice that the attribute syntax is similar to that used for events in HTML
+documents. In fact, both HTML and XUL share the same event mechanism. One important
+difference is that while the 'click' event (or the <SPAN CLASS="attrib">onclick</SPAN>
+attribute) is used in HTML to respond to buttons, in XUL the command event should be
+used instead. XUL does have a click event, but it only responds to mouse clicks, not
+to keyboard usage. Thus, the click event should be avoided in XUL, unless you have a
+reason to have an element that can only be handled with a mouse.
+</P>
+
+<DIV CLASS="task">
+
+<P>
+A command handler can be placed on the Find and Cancel buttons in the find files
+dialog. Pressing the Find button should start the search. Because we aren't going to
+implement this part yet, we'll leave it out for now. However, pressing the Cancel
+button should close the window. The code below shows how to do this. While we're at
+it, let's add the same code to the Close menu item.
+</P>
+
+
+<DIV CLASS="sample"><PRE>&lt;menuitem label="Close" accesskey="c" <SPAN STYLE="color: red;">oncommand="window.close();"</SPAN>/&gt;
+...
+
+&lt;button id="cancel-button" label="Cancel"
+     <SPAN STYLE="color: red;">oncommand="window.close();"</SPAN>/&gt;</PRE></DIV>
+
+
+
 <P>
-A handler should return <SPAN CLASS="aval">true</SPAN> if the event has been
-handled or <SPAN CLASS="aval">false</SPAN> if the event has not been handled. By
-returning false, you can do something but still have the default processing occur.
-This process is similar to how HTML events are handled.
+Two handlers have been added here. The <SPAN CLASS="attrib">oncommand</SPAN>
+attribute was added to the Close menu item. By using this handler, the user will
+be able to close the window by clicking the menu item with the mouse or by selecting
+it with the keyboard. The <SPAN CLASS="attrib">oncommand</SPAN> handler was also added
+to the Cancel button.
 </P>

-<P>You can get the element that the event was originally passed to by getting the
-<SPAN CLASS="attrib">target</SPAN> property of the <A CLASS="tag" HREF="/references/elemref/ref_event.html">event</A>
-object. For example, if you add the following event handler to a window, an alert box
-will appear whenever you click on an element in the window. The alert will display
-which element was clicked on.
+</DIV>
+
+<H3>DOM Event Listeners</H3>
+
+<P>
+The second way to add an event handler is to call an element's addEventListener
+method. This allows you to attach an event listener dynamically and listen for
+events during the capturing phase. The syntax is as follows:
 </P>


-<DIV CLASS="sample"><PRE>&lt;window
-    onclick="alert(event.target.tagName); return false;"
-    .
-    .
-    .
-&gt;</PRE></DIV>
+Example 6.1.3:
+<A HREF='examples/ex_events_3.xul.txt'>Source</A>
+<A HREF="examples/ex_events_3.xul" ONCLICK="window.open('examples/ex_events_3.xul','xulex','chrome,resizable'); return false;">View</A>
+<DIV CLASS="example"><PRE>&lt;button id="okbutton" label="OK"/&gt;
+
+&lt;script&gt;
+function buttonPressed(event)
+{
+  alert('Button was pressed!');
+}
+
+var button = document.getElementById("okbutton");
+button.addEventListener('command', buttonPressed, true);
+&lt;/script&gt;
+</PRE></DIV>



 <P>
-You can also add event handlers dynamically using the function
-addEventListener. You can use it for any element and event type. It
-takes three parameters, the event type, a function to execute when the
-event occurs and a boolean indicating whether to capture or not.
+The getElementById function returns the element with a given id, in this case the
+button. The addEventListener function is called to add a new capturing event
+listener. The first argument is the name of the event to listen to. The second
+argument is the event listener function which will be called when the event occurs.
+This function may take one argument, the event object, as shown in the declaration
+for the buttonPressed function above. Finally, the last argument should be true for
+capturing listeners. You can also listen during the bubbling phase by setting the
+last argument to false.
 </P>


